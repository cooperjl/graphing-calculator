struct Circle {
    radius: f32,
    segments: u32,
    position: [f32; 3],
    vertices: [f32],
    indices: [u32],
}

impl Circle {
    fn new(radius: f32, segments: u32, position: [f32; 3]) -> Self {
        Self {
            radius,
            segments,
            position,
        }
    }

    fn idkyet(&self) {
        let mut vertices: Vec<[f32; 3]> = Vec::new();
        let mut indices: Vec<[u32; 3]> = Vec::new();

        vertices.push([0.0, 0.0, 0.0]);

        for s in 0..self.segments {
            // we trace the circle and place points along it
            let current_seg = (2.0*3.14159) * (s as f32 / self.segments as f32);

            let x = self.radius * current_seg.cos();
            let y = self.radius * current_seg.sin();
            let z = 0.0;

            vertices.push([x, y, z]);
        }

        for i in 1..self.segments {
            indices.push([i, i + 1, 0]);
        }

        ()
    }
}
